Sized types have been developed to make termination checking more perspicuous, more powerful, and more modular by integrating termination into type checking.  In dependently-typed proof assistants where proofs by induction are just recursive functional programs, the termination checker is an integral component of the trusted core, as validity of proofs depend on termination.  However, a rigorous integration of full-fledged sized types into dependent type theory is lacking so far.  Such an integration is non-trivial, as explicit sizes in proof terms might get in the way of equality checking, making terms appear distinct that should have the same semantics.

In this work, we integrate dependent types and sized types with higher-rank size polymorphism, which is essential for generic programming and abstraction.  We introduce a size quantifier ``forall'' which lets us ignore sizes in terms for equality checking, alongside with a second quantifier ``Pi'' for abstracting over sizes that do affect the semantics of types and terms.  Judgmental equality is decided by an adaptation of normalization-by-evaluation.
