We thank the reviewers for the time spent on careful reading and the
valuable feedback they provide to us.

We will address all points raised by the reviewers when preparing the
final version.  In the following, we comment on the most important
concerns raised by the reviewers.

On sections 6 and 7: They do not offer any new technical ideas over
the state of the art and thus have been temporarily confined to the
long version.  They will appear in the final version where the page
limit is relaxed.

We shall also move some technical stuff (typing rules, proofs) to the
appendix.


> Reviewer A

>  * It is not clear why a relevant use of Size is needed. Couldn't Size
>    be irrelevant and any other type be relevant?

Nat : Size -> Set is an example of a relevant (more precisely,
shape-irrelevant) function type over Size.  If Nat i would be equal to
Nat j for any i,j, there was no point in having sizes in the first place.

sizeSuc : Size -> Size would be an example of relevant, non
shape-irrelevant function type (but we dropped these for simplicity).

> p2l20: what is post, and why do we care?

Postprocessing, that need not preserve the size.  Will explain better.

> p4l34: what is b?

A size expression (unrelated to a).

> p5l23: I couldn't understand what is an inaccessible pattern.

A pattern forced by other pattern matches (due to dependencies).  It
is not matched against at runtime (would be pointless).

> p6l7: what is the notation {! !}?

Inside {! !} there are candidate terms, which need not type-check.

> p7l24: why de Bruijn indices? what's the point of using them in the
> presentation of the theory?

We are studying properties of a dependently-typed core language, de
Bruijn indices are the most popular representation of variables (Coq,
Agda).  We wish to do proofs about a theory close to an implementation.
Where de Bruijn indices are hard to read, e.g. in concrete terms, we
fall back to named variables for the sake of presentation.


> Reviewer B

> however I have strong concerns about the relaxation of the
> size checking being able to be employed too often in such a
> circumstance as to make the size types redundant in circumstances in
> which they would help catch errors.

We are in essence describing Church-style size quantification with a
Curry-style semantics, i.e., we ignore sizes where they act as type
arguments, e.g., in the constructors of Nat.  We do not ignore sizes
where they act as indices in types, e.g., in Nat itself.  Curry-style
is sound in the same way as Church-style is, thus, we do not miss any
type errors.  We use the irrelevant size arguments only in the type
*checker*.  Here, they must be correct.  However, in the semantics,
i.e., the typing and equality rules, they are ignored as just being
hints for the type checker.


> Reviewer C

> - ... Definition of the PER 'NE'... I don't understand why there is no constraint
>   on the types $T$ and $T'$?

NE contains all terms that are stuck.  There is no need to ask for
well-typedness.  It is common in normalization proofs that the
semantic types are over-approximations.  They may contain lots of junk,
as long as normalization is not violated.
In contrast, the logical relation of Section 5 restricts to well-typed
terms.

> Page 4, lines 34-36: should the 't's on the right hand side of the
> conclusions of the first and third judgement here be primed?

Yes. Thanks for spotting this typo.

> Page 7, line 5/6: "pure type system". I thought that pure type systems
> necessarily had untyped equality, but maybe not.

You are right.  We mean "Pure Type System with Judgmental Equality"
[Herbelin, Siles, LICS 2010].

> Pages 10 and 11. Why are some of the rules in boxes?

These mostly involve irrelevant size application.  We will explain.

> Page 16, line 16: Is the denotation of $\forall \mathcal{F}$ the
> intersection?

In some sense, if you ignore the irrelevant size application.

> Page 16, line 43: I assume that $\mathcal{D}$ refers to the derivation
> of the equality, but this isn't explicitly mentioned.

Yes.  We will explain.

> Page 18, line 41: "... by lemma 4.1, and by induction
> hypothesis". Also using Lemma 4.7? because we need $B_1[u_1]
> \sqsubseteq B_1[u_1]$?

Actually, no. We need $B[u_1] \sqsubseteq B_1[u_1]$ which we get by last
premise of the rule.

> Also, on line 44, there is a use of Lemma 4.1(1) when
> applying the induction hypothesis?

Yes, correct.

> Page 19, lines 39-40: Maybe point out that this definition is
> mirroring the derived judgement for 'Adm' on page 8, line 37.

Shall do.

> Page 24, lines 17-23: what is an incremental equality checker?

One that does not do full normalization in one go, but just weak-head
normalizes before recursively comparing the subterms.  Shall explain.
